# -*- coding: utf-8 -*-
"""fakenews.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NsaEQHQRV0QhSlqPjKhqAOsS1y76O1wS
"""

import pandas as pd
import numpy as np
import nltk
import re
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import PassiveAggressiveClassifier
from sklearn.metrics import accuracy_score, confusion_matrix

# Download stopwords if not already downloaded
nltk.download('stopwords')
from nltk.corpus import stopwords

# Load the dataset
data = pd.read_csv('news.csv')

# Display the first few rows
print(data.head())

# Check for any missing values
print(data.isnull().sum())

#Read the data
df=pd.read_csv('news.csv')

#Get shape and head
df.shape
df.head()

# Define a text preprocessing function
def preprocess_text(text):
    text = re.sub(r'[^\w\s]', '', text)  # Remove punctuation
    text = text.lower()  # Convert to lowercase
    words = text.split()
    words = [word for word in words if word not in stopwords.words('english')]  # Remove stopwords
    return ' '.join(words)

# Apply preprocessing to the text data
data['cleaned_text'] = data['text'].apply(preprocess_text)

# Define features and labels
X = data['cleaned_text']
y = data['label']  # Assuming the label column is named 'label'

# Split the data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize TF-IDF Vectorizer
tfidf_vectorizer = TfidfVectorizer(max_df=0.7)

# Fit and transform the data
X_train_tfidf = tfidf_vectorizer.fit_transform(X_train)
X_test_tfidf = tfidf_vectorizer.transform(X_test)

# Initialize the model
model = PassiveAggressiveClassifier(max_iter=50)
model.fit(X_train_tfidf, y_train)

# Predict on test data
y_pred = model.predict(X_test_tfidf)

# Calculate accuracy
accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy * 100:.2f}%')

# Confusion matrix
conf_matrix = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:\n", conf_matrix)

def predict_news(text):
    # Preprocess and transform the text
    cleaned_text = preprocess_text(text)
    text_tfidf = tfidf_vectorizer.transform([cleaned_text])
    prediction = model.predict(text_tfidf)
    return "Fake" if prediction[0] == 1 else "Real"

# Example prediction
print(predict_news("This is a sample news article to test the model."))

pip install matplotlib seaborn

import matplotlib.pyplot as plt
import seaborn as sns

# Calculate accuracy in percentage
accuracy = accuracy_score(y_test, y_pred) * 100
print(f'Accuracy: {accuracy:.2f}%')

# Confusion matrix
conf_matrix = confusion_matrix(y_test, y_pred)

# Plot the confusion matrix
plt.figure(figsize=(6, 4))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=['Real', 'Fake'], yticklabels=['Real', 'Fake'])
plt.xlabel('Predicted Labels')
plt.ylabel('True Labels')
plt.title('Confusion Matrix')
plt.show()

# Calculate training accuracy
y_train_pred = model.predict(X_train_tfidf)
train_accuracy = accuracy_score(y_train, y_train_pred) * 100
test_accuracy = accuracy_score(y_test, y_pred) * 100

# Plot training and testing accuracy
plt.figure(figsize=(6, 4))
plt.bar(['Training Accuracy', 'Testing Accuracy'], [train_accuracy, test_accuracy], color=['green', 'blue'])
plt.ylim(0, 100)
plt.ylabel('Accuracy (%)')
plt.title('Model Accuracy on Training and Testing Data')
plt.show()